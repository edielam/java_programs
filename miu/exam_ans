static int sameNumberOfFactors(int n1, int n2) {
        if (n1 == 1 && n2 == 1)
        return 1;
        if (n1 < 0 || n2 < 0)
        return -1;
        int counter1 = 0;
        int counter2 = 0;
        for (int i = 1; i <= n1; i++) {
            if (n1 % i == 0) {
                counter1++;
            }
        }
        for (int j = 1; j <= n2; j++) {
            if (n2 % j == 0) {
                counter2++;
            }
        }
        if (counter1 == counter2){
            return 1;
        } else
            return 0;
    }


static int isMartian(int[] a) {

        int c1 = 0;
        int c2 = 0;
        int n = a.length;

        if (n == 0) {
            return 0;
        }

        if (n == 1) {
            return a[0] == 1 ? 1 : 0;
        }

        for (int i = 0; i < n; i++) {
            if (i != n - 1) {
                if (a[i] == a[i + 1]) {
                    return 0;
                }
            }

            if (i == n - 2) {
                if (a[i] == a[n - 1]) {
                    return 0;
                }
            }
            if (a[i] == 1) {
                c1++;
            }

            if (a[i] == 2) {
                c2++;
            }
        }

        if (c1 > c2) {
            return 1;
        }
        return 0;
    }

    static int isPrimeHappy(int n){
        int sumPrime = 0;
        boolean isPrime = false;

        for (int i = 2; i < n; i++) {
            isPrime = true;
        for (int j = 2; j <= i/2; j++) {
            if (i % j == 0) {
            isPrime = false;
            break;
            }
        }
        if (isPrime) {
            sumPrime += i;
        }
        
        }
        if (sumPrime > 0 && sumPrime % n == 0)
            return 1;
        else
            return 0;
  }